import os
import asyncio
import datetime
import aiohttp
import boto3
from dotenv import load_dotenv
import pytz
import logging

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env ---
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 ---
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_BUCKET = os.getenv("S3_BUCKET")
S3_ACCESS_KEY = os.getenv("S3_ACCESS_KEY")
S3_SECRET_KEY = os.getenv("S3_SECRET_KEY")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ error-–±–æ—Ç–∞ ---
ERROR_BOT_TOKEN = os.getenv("ERROR_BOT_TOKEN")
ERROR_CHAT_ID = os.getenv("ERROR_CHAT_ID")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ---
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
LOG_FILE = "/opt/leads_postback/bot_send.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 ---
s3 = boto3.client(
    "s3",
    endpoint_url=S3_ENDPOINT,
    aws_access_key_id=S3_ACCESS_KEY,
    aws_secret_access_key=S3_SECRET_KEY,
)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
async def send_file(file_path: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    async with aiohttp.ClientSession() as session:
        with open(file_path, "rb") as f:
            form = aiohttp.FormData()
            form.add_field("chat_id", CHAT_ID)
            form.add_field("document", f)
            await session.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument",
                data=form
            )

async def send_error(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (–≤ –ª–∏—á–∫—É)"""
    if not ERROR_BOT_TOKEN or not ERROR_CHAT_ID:
        logging.error("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã ERROR_BOT_TOKEN –∏–ª–∏ ERROR_CHAT_ID")
        return
    async with aiohttp.ClientSession() as session:
        await session.post(
            f"https://api.telegram.org/bot{ERROR_BOT_TOKEN}/sendMessage",
            data={"chat_id": ERROR_CHAT_ID, "text": message}
        )

async def main():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å"""
    tz = pytz.timezone(TIMEZONE)
    now = datetime.datetime.now(tz)
    yesterday = (now - datetime.timedelta(days=1)).strftime("%d.%m.%Y")
    filename = f"leads_sub6_{yesterday}.txt"
    local_path = f"/opt/leads_postback/data/{filename}"

    old_date = (now - datetime.timedelta(days=7)).strftime("%d.%m.%Y")
    old_filename = f"leads_sub6_{old_date}.txt"
    old_local_path = f"/opt/leads_postback/data/{old_filename}"

    logging.info(f"=== START {yesterday} ===")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await send_file(local_path)
        logging.info(f"[‚úÖ] –§–∞–π–ª {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")

        # –£–¥–∞–ª—è–µ–º 7 –¥–Ω–µ–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(old_local_path):
            os.remove(old_local_path)
            logging.info(f"[üßπ] –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {old_local_path} (7 –¥–Ω–µ–π) —É–¥–∞–ª—ë–Ω")

    except Exception as e:
        err_msg = f"Error bot_send.py: {e}"
        logging.error(err_msg)
        await send_error(err_msg)

    logging.info(f"=== END {yesterday} ===")

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ bot_send.py –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É")
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            asyncio.run(send_error(f"Error bot_send.py: {e}"))
        except:
            pass
